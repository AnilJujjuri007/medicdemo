from flask import Flask, jsonify, request
from azure.iot.device import IoTHubDeviceClient, Message
from pymodbus.client import ModbusTcpClient
from apscheduler.schedulers.background import BackgroundScheduler
import json
import math
import random
app = Flask(__name__)
# Azure IoT Hub connection string
CONNECTION_STRING = "HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=menderclient;SharedAccessKey=Sjr8fBZiUYQwksGYpyzlySO8WrnqkkartEbfTQhlo68="
 
# Initialize Azure IoT Hub client
client = IoTHubDeviceClient.create_from_connection_string(CONNECTION_STRING)
 
def read_modbus_data(modbus_host):
    try:
        # Connect to Modbus device (Modbus TCP)
        with ModbusTcpClient(host=modbus_host, port=502) as client:
            # Read holding registers (modify based on your Modbus device)
            result = client.read_holding_registers(address=0, count=2)
            if result.isError():
                raise Exception(f"Modbus Error: {result.message}")
 
            # Extract data from Modbus response
            data = {
                "register_0": result.registers[0],
                "register_1": result.registers[1]
            }
 
            return data
    except Exception as e:
        raise Exception(f"Modbus Error: {str(e)}")
 
def send_modbus_telemetry(modbus_host):
    try:
        # Read Modbus data
        modbus_data = read_modbus_data(modbus_host)
       
        temperature = modbus_data["register_0"]  # Adjust based on your data structure
        humidity = modbus_data["register_1"]
        # Adjust based on your data structure
        Id =random.randint(0,1000)
        # Convert Modbus data to JSON string
        MSG_SND = '{{"Id":{Id},"temperature": {temperature},"humidity": {humidity}}}'
        msg_txt_formatted = MSG_SND.format(Id=Id,temperature=temperature, humidity=humidity)
        # message = Message(json.dumps(telemetry_message))
        # message.content_encoding="utf-8"
        # message.content_type="application/json"
        message = Message(msg_txt_formatted)
        print( "Sending message: {}".format(message))
        # Send telemetry data to Azure IoT Hub
        client.send_message(message)
       
 
        print("Telemetry sent successfully")
    except Exception as e:
        print(f"Error sending telemetry: {str(e)}")
 
@app.route('/telemetry', methods=['POST'])
def telemetry_endpoint():
    try:
        # Get the Modbus device's IP address from the request
        modbus_host = request.json.get('modbus_host')
 
        # Validate if modbus_host is provided
        if not modbus_host:
            raise ValueError("Modbus host is required in the request JSON.")
 
        # Call the function to send telemetry
        send_modbus_telemetry(modbus_host)
 
        return jsonify({"status": "Telemetry sent successfully"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500
 
# Schedule the background task to run every minute (adjust as needed)
scheduler = BackgroundScheduler()
scheduler.add_job(lambda: send_modbus_telemetry("192.168.101.75"), 'interval', minutes=1)  # Default IP address for demonstration
scheduler.start()

if __name__ == '__main__':
    # Start the Flask application
    app.run(port=3000)
